
import time
start = time.time()

def knapsack_dynamic_programming(values, weights, capacity):
    algo_start = time.time()
    n = len(values)
    
    # Create a table to store the maximum values for different capacities
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]
    
    # Fill the table using dynamic programming
    for i in range(n + 1):
        for w in range(capacity + 1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif weights[i - 1] <= w:
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])
            else:
                dp[i][w] = dp[i - 1][w]
    
    # Backtrack to find the items included in the knapsack
    items = []
    i, j = n, capacity
    while i > 0 and j > 0:
        if dp[i][j] != dp[i - 1][j]:
            items.append(i - 1)
            j -= weights[i - 1]
        i -= 1
    
    items.reverse()
    
    algo_end = time.time()
    algo_exec = (algo_end-algo_start)*10**3
    return dp[n][capacity], items, algo_exec

# Example usage
n = int(input("How many items to add: "))
values = []
weights = []

for i in range(n):
    print("\nEnter details for item-{}".format(i))
    item_v = int(input("Enter item value: "))
    values.append(item_v)
    item_w = int(input("Enter item weight: "))
    weights.append(item_w)

print("\nItems are:\nValues = {}\nWeights = {}".format(values, weights))
capacity = int(input("Enter capacity: "))

max_value, selected_items, algo_execution_time = knapsack_dynamic_programming(values, weights, capacity)
print("\nMaximum Value: {}".format(max_value))
print("Selected Items: {}".format(selected_items))

end = time.time()
print("\nAlgorithm execution time is: {}".format(algo_execution_time))
print("Execution time is: {}ms".format((end-start)*10**3))
